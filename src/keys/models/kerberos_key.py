# coding: utf-8

"""
    DDI Keys API

    The DDI Keys application is a Universal DDI service for managing TSIG keys and GSS-TSIG (Kerberos) keys which are used by other Universal DDI applications. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.   

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class KerberosKey(BaseModel):
    """
    A __Key__ object represents a Kerberos key.
    """

  # noqa: E501
    algorithm: Optional[StrictStr] = Field(
        default=None,
        description=
        "Encryption algorithm of the key in accordance with RFC 3961.")
    comment: Optional[StrictStr] = Field(
        default=None,
        description=
        "The description for Kerberos key. May contain 0 to 1024 characters. Can include UTF-8."
    )
    domain: Optional[StrictStr] = Field(
        default=None, description="Kerberos realm of the principal.")
    id: Optional[StrictStr] = Field(default=None,
                                    description="The resource identifier.")
    principal: Optional[StrictStr] = Field(
        default=None, description="Kerberos principal associated with key.")
    tags: Optional[Dict[str, Any]] = Field(
        default=None,
        description="The tags for the Kerberos key in JSON format.")
    uploaded_at: Optional[StrictStr] = Field(
        default=None, description="Upload time for the key.")
    version: Optional[StrictInt] = Field(
        default=None, description="The version number (KVNO) of the key.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = [
        "algorithm", "comment", "domain", "id", "principal", "tags",
        "uploaded_at", "version"
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KerberosKey from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "algorithm",
            "domain",
            "id",
            "principal",
            "uploaded_at",
            "version",
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KerberosKey from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "algorithm": obj.get("algorithm"),
            "comment": obj.get("comment"),
            "domain": obj.get("domain"),
            "id": obj.get("id"),
            "principal": obj.get("principal"),
            "tags": obj.get("tags"),
            "uploaded_at": obj.get("uploaded_at"),
            "version": obj.get("version")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
