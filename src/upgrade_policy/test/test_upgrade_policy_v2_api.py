# coding: utf-8

"""
    Schedule Software/Config Updates

    Infoblox by default does automatic software updates when they become available. Updates are applied to all on-prem hosts, physical or virtual. However, you can override and schedule the software updates. You can also defer the updates to a later date and time. You can configure up to a total of 50 deferrals (scheduled and deferred software updates), which means you have the flexibility to create up to 50 update groups across different on-prem hosts by mapping with appropriate tags. Tags are be used to associate deferrals (scheduled or deferred) with a specific or group of onprem-hosts. Apart from software update deferrals, config update deferrals also can be configured using these overrides.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from upgrade_policy.api.upgrade_policy_v2_api import UpgradePolicyV2Api

from universal_ddi_client.api_client import ApiClient


class TestUpgradePolicyV2Api(unittest.TestCase):
    """UpgradePolicyV2Api unit test stubs"""

    def setUp(self) -> None:
        api_instance = ApiClient()
        self.api = UpgradePolicyV2Api(api_instance)

    def tearDown(self) -> None:
        pass

    def test_apply_config_now(self) -> None:
        """Test case for apply_config_now

        Immediately apply the config updates object to the list of hosts
        """
        pass

    def test_batch(self) -> None:
        """Test case for batch

        Create, update and/or delete multiple maintenance windows in a single request
        """
        pass

    def test_create(self) -> None:
        """Test case for create

        Create a maintenance window
        """
        pass

    def test_delete(self) -> None:
        """Test case for delete

        Delete maintenance window
        """
        pass

    def test_get(self) -> None:
        """Test case for get

        Read a maintenance window
        """
        pass

    def test_list(self) -> None:
        """Test case for list

        List all the maintenance windows
        """
        pass

    def test_update(self) -> None:
        """Test case for update

        Update an existing maintenance window
        """
        pass


if __name__ == '__main__':
    unittest.main()
