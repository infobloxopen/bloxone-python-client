# coding: utf-8

"""
    IP Address Management API

    The IPAM/DHCP Application is a Universal DDI service providing IP address management and DHCP protocol features. The IPAM component provides visibility into and provisioning tools to manage networking spaces, monitoring and reporting of entire IP address infrastructures, and integration with DNS and DHCP protocols. The DHCP component provides DHCP protocol configuration service with on-prem host serving DHCP protocol. It is part of the full-featured, DDI cloud solution that enables customers to deploy large numbers of protocol servers to deliver DNS and DHCP throughout their enterprise network.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from ipam.api.config_profile_api import ConfigProfileApi

from universal_ddi_client.api_client import ApiClient


class TestConfigProfileApi(unittest.TestCase):
    """ConfigProfileApi unit test stubs"""

    def setUp(self) -> None:
        api_instance = ApiClient()
        self.api = ConfigProfileApi(api_instance)

    def tearDown(self) -> None:
        pass

    def test_associate_config_profile_to_objects(self) -> None:
        """Test case for associate_config_profile_to_objects

        Associate a config profile to objects.
        """
        pass

    def test_associate_object_to_config_profiles(self) -> None:
        """Test case for associate_object_to_config_profiles

        Associate an object to config profiles.
        """
        pass

    def test_disassociate_config_profile_from_objects(self) -> None:
        """Test case for disassociate_config_profile_from_objects

        Disassociate a config profile from objects.
        """
        pass

    def test_disassociate_object_from_config_profiles(self) -> None:
        """Test case for disassociate_object_from_config_profiles

        Disassociate an object from a config profile.
        """
        pass

    def test_list_config_profiles(self) -> None:
        """Test case for list_config_profiles

        Retrieve config profiles.
        """
        pass

    def test_list_subnets(self) -> None:
        """Test case for list_subnets

        Retrieve subnets associated with a config profile.
        """
        pass


if __name__ == '__main__':
    unittest.main()
