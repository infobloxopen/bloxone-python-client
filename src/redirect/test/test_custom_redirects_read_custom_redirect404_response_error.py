# coding: utf-8

"""
    BloxOne Redirect API

    You can configure BloxOne Threat Defense Cloud to redirect traffic to the Infoblox server that displays the default or customized redirect page. You can redirect traffic to a custom destination using custom redirects. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from redirect.models.custom_redirects_read_custom_redirect404_response_error import CustomRedirectsReadCustomRedirect404ResponseError


class TestCustomRedirectsReadCustomRedirect404ResponseError(unittest.TestCase):
    """CustomRedirectsReadCustomRedirect404ResponseError unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(
            self, include_optional
    ) -> CustomRedirectsReadCustomRedirect404ResponseError:
        """Test CustomRedirectsReadCustomRedirect404ResponseError
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CustomRedirectsReadCustomRedirect404ResponseError`
        """
        model = CustomRedirectsReadCustomRedirect404ResponseError()
        if include_optional:
            return CustomRedirectsReadCustomRedirect404ResponseError(
                code = 'NOT_FOUND',
                message = 'Custom Redirect does not exist',
                status = '404'
            )
        else:
            return CustomRedirectsReadCustomRedirect404ResponseError(
        )
        """

    def testCustomRedirectsReadCustomRedirect404ResponseError(self):
        """Test CustomRedirectsReadCustomRedirect404ResponseError"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
