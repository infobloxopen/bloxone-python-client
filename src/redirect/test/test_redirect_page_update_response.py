# coding: utf-8

"""
    BloxOne Redirect API

    You can configure BloxOne Threat Defense Cloud to redirect traffic to the Infoblox server that displays the default or customized redirect page. You can redirect traffic to a custom destination using custom redirects. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from redirect.models.redirect_page_update_response import RedirectPageUpdateResponse


class TestRedirectPageUpdateResponse(unittest.TestCase):
    """RedirectPageUpdateResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RedirectPageUpdateResponse:
        """Test RedirectPageUpdateResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RedirectPageUpdateResponse`
        """
        model = RedirectPageUpdateResponse()
        if include_optional:
            return RedirectPageUpdateResponse(
                results = redirect.models.redirect_redirect_page.redirectRedirectPage(
                    content = '<!DOCTYPE html><html><body><h1>Redirect</h1></body></html>', 
                    created_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    redirect_ip_address = '135.32.5.11', 
                    redirect_ipv6_address = '2001:db8:ffff:ffff:ffff:ffff:ffff:ffff', 
                    smart = True, 
                    type = 'custom', 
                    updated_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
            )
        else:
            return RedirectPageUpdateResponse(
        )
        """

    def testRedirectPageUpdateResponse(self):
        """Test RedirectPageUpdateResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
