# coding: utf-8

"""
    BloxOne Redirect API

    You can configure BloxOne Threat Defense Cloud to redirect traffic to the Infoblox server that displays the default or customized redirect page. You can redirect traffic to a custom destination using custom redirects. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from redirect.models.custom_redirects_read_custom_redirect404_response import CustomRedirectsReadCustomRedirect404Response


class TestCustomRedirectsReadCustomRedirect404Response(unittest.TestCase):
    """CustomRedirectsReadCustomRedirect404Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(
            self,
            include_optional) -> CustomRedirectsReadCustomRedirect404Response:
        """Test CustomRedirectsReadCustomRedirect404Response
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CustomRedirectsReadCustomRedirect404Response`
        """
        model = CustomRedirectsReadCustomRedirect404Response()
        if include_optional:
            return CustomRedirectsReadCustomRedirect404Response(
                error = redirect.models.custom_redirects_read_custom_redirect_404_response_error.custom_redirectsReadCustomRedirect_404_response_error(
                    code = 'NOT_FOUND', 
                    message = 'Custom Redirect does not exist', 
                    status = '404', )
            )
        else:
            return CustomRedirectsReadCustomRedirect404Response(
        )
        """

    def testCustomRedirectsReadCustomRedirect404Response(self):
        """Test CustomRedirectsReadCustomRedirect404Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
