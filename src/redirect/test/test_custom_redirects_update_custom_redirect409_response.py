# coding: utf-8

"""
    BloxOne Redirect API

    You can configure BloxOne Threat Defense Cloud to redirect traffic to the Infoblox server that displays the default or customized redirect page. You can redirect traffic to a custom destination using custom redirects. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from redirect.models.custom_redirects_update_custom_redirect409_response import CustomRedirectsUpdateCustomRedirect409Response


class TestCustomRedirectsUpdateCustomRedirect409Response(unittest.TestCase):
    """CustomRedirectsUpdateCustomRedirect409Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(
            self, include_optional
    ) -> CustomRedirectsUpdateCustomRedirect409Response:
        """Test CustomRedirectsUpdateCustomRedirect409Response
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CustomRedirectsUpdateCustomRedirect409Response`
        """
        model = CustomRedirectsUpdateCustomRedirect409Response()
        if include_optional:
            return CustomRedirectsUpdateCustomRedirect409Response(
                error = redirect.models.custom_redirects_update_custom_redirect_409_response_error.custom_redirectsUpdateCustomRedirect_409_response_error(
                    code = 'ALREADY_EXISTS', 
                    message = 'Custom Redirect with name '<name>' already exists', 
                    status = '409', )
            )
        else:
            return CustomRedirectsUpdateCustomRedirect409Response(
        )
        """

    def testCustomRedirectsUpdateCustomRedirect409Response(self):
        """Test CustomRedirectsUpdateCustomRedirect409Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
